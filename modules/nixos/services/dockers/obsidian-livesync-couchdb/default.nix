# Auto-generated using compose2nix v0.3.1.
{ config, pkgs, lib, ... }:
with lib;
with lib.custom;
let cfg = config.services.dockers.obsidian-livesync-couchdb;

in {
  options.services.dockers.obsidian-livesync-couchdb = with types; {
    enable = mkBoolOpt false "Enable obsidian-livesync";
  };
  config = mkIf cfg.enable {
    # Containers
    virtualisation.oci-containers.containers."obsidian-livesync" = {
      image = "couchdb:latest";
      environment = {
        "COUCHDB_PASSWORD" = "yzld2002";
        "COUCHDB_USER" = "yzld2002";
      };
      volumes = [
        "/home/yzld2002/docker-stacks/obsidian-livesync-couchdb/couchdb-data:/opt/couchdb/data:rw"
        "/home/yzld2002/docker-stacks/obsidian-livesync-couchdb/couchdb-etc:/opt/couchdb/etc/local.d:rw"
      ];
      ports = [ "5984:5984/tcp" ];
      labels = {
        "traefik.docker.network" = "obsidian-livesync_default";
        "traefik.enable" = "true";
        "traefik.http.middlewares.obsidiancors.headers.accessControlAllowCredentials" =
          "true";
        "traefik.http.middlewares.obsidiancors.headers.accesscontrolallowheaders" =
          "accept,authorization,content-type,origin,referer";
        "traefik.http.middlewares.obsidiancors.headers.accesscontrolallowmethods" =
          "GET,PUT,POST,HEAD,DELETE";
        "traefik.http.middlewares.obsidiancors.headers.accesscontrolalloworiginlist" =
          "app://obsidian.md,capacitor://localhost,http://localhost";
        "traefik.http.middlewares.obsidiancors.headers.accesscontrolmaxage" =
          "3600";
        "traefik.http.middlewares.obsidiancors.headers.addvaryheader" = "true";
        "traefik.http.routers.obsidian-livesync.entrypoints" = "https";
        "traefik.http.routers.obsidian-livesync.middlewares" = "obsidiancors";
        "traefik.http.routers.obsidian-livesync.rule" =
          "Host(`obsidian-livesync.20190915.xyz`)";
        "traefik.http.services.obsidian-livesync.loadbalancer.server.port" =
          "5984";
      };
      user = "1000:100";
      log-driver = "journald";
      extraOptions = [
        "--network-alias=couchdb"
        "--network=obsidian-livesync-couchdb_default"
      ];
    };
    systemd.services."docker-obsidian-livesync" = {
      serviceConfig = {
        Restart = lib.mkOverride 90 "always";
        RestartMaxDelaySec = lib.mkOverride 90 "1m";
        RestartSec = lib.mkOverride 90 "100ms";
        RestartSteps = lib.mkOverride 90 9;
      };
      after = [ "docker-network-obsidian-livesync-couchdb_default.service" ];
      requires = [ "docker-network-obsidian-livesync-couchdb_default.service" ];
      partOf = [ "docker-compose-obsidian-livesync-couchdb-root.target" ];
      wantedBy = [ "docker-compose-obsidian-livesync-couchdb-root.target" ];
    };

    # Networks
    systemd.services."docker-network-obsidian-livesync-couchdb_default" = {
      path = [ pkgs.docker ];
      serviceConfig = {
        Type = "oneshot";
        RemainAfterExit = true;
        ExecStop = "docker network rm -f obsidian-livesync-couchdb_default";
      };
      script = ''
        docker network inspect obsidian-livesync-couchdb_default || docker network create obsidian-livesync-couchdb_default
      '';
      partOf = [ "docker-compose-obsidian-livesync-couchdb-root.target" ];
      wantedBy = [ "docker-compose-obsidian-livesync-couchdb-root.target" ];
    };

    # Root service
    # When started, this will automatically create all resources and start
    # the containers. When stopped, this will teardown all resources.
    systemd.targets."docker-compose-obsidian-livesync-couchdb-root" = {
      unitConfig = { Description = "Root target generated by compose2nix."; };
      wantedBy = [ "multi-user.target" ];
    };
  };
}
